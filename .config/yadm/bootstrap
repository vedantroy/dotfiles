#! /usr/bin/env python3
from enum import Enum, auto
import sys
from urllib import request
from tempfile import NamedTemporaryFile
import os
import shutil

if sys.version_info[0] < 3:
    sys.exit("Must use Python 3")
if os.geteuid() == 0:
    sys.exit(
        "This script should not be run as superuser. It will request sudo privileges when necessary."
    )


def run(cmd):
    print(f'Executing "{cmd}"')
    cmd = cmd.split()
    return os.spawnvpe(os.P_WAIT, cmd[0], cmd, os.environ)


class PackageManager(Enum):
    APT = auto()
    PACMAN = auto()


pkg_mans = {"pacman": PackageManager.PACMAN, "apt": PackageManager.APT}

for val in PackageManager:
    if val not in pkg_mans.values():
        raise Exception(f"Internal error: {val} does not have a friendly name")


class Installer:
    def __init__(self, pkg_manager):
        self.installers = []
        self.pkg_man = pkg_manager
        if pkg_manager == PackageManager.PACMAN:
            self.pacman_base = "sudo pacman"
            flags = "-S --needed"
            self.installers.append(f"{self.pacman_base} {flags}")
            self.installers.append(f"yay {flags}")
        elif pkg_manager == PackageManager.APT:
            raise Exception("Not Implemented")

    def update_pkg_manager(self):
        if self.pkg_man == PackageManager.PACMAN:
            run(f"{self.pacman_base} -Syu")
        else:
            raise Exception("Not Implemented")

    def get_installer(self, primary):
        if primary is False and len(self.installers) < 2:
            raise Exception(
                f"Package manager: {self.pkg_man} does not have a secondary installer"
            )
        return self.installers[0 if primary else 1]

    def install_pkg(self, pkg, primary=True):
        if not isinstance(pkg, str):
            raise ValueError(f"pkg should be the name of a pkg to install")
        run(f"{self.get_installer(primary)} {pkg}")

    def install_pkgs(self, pkgs, primary=True):
        if not isinstance(pkgs, list):
            raise ValueError(f"pkgs should be a list of packages to install")
        pkgs = " ".join(pkgs)
        run(f"{self.get_installer(primary)} {pkgs}")


HOME_DIR = os.path.expanduser("~")
ZSH_DIR = f"{HOME_DIR}/.zsh"


def clone_zsh_repo(repo_path, host="github.com"):
    url = f"https://www.{host}/{repo_path}.git"
    if repo_path.count("/") != 1:
        raise Exception(f'Invalid repo path: "{repo_path}", had too many slashes')
    dest_folder = repo_path[repo_path.index("/") + 1 :]
    run(f"git clone --depth=1 {url} {ZSH_DIR}/{dest_folder}")


# Use environment variables b/c "yadm bootstrap" swallows
# CLI args: https://github.com/TheLocehiliosan/yadm/issues/247

"""
PKG_MAN_KEY = "PKG_MAN"
if PKG_MAN_KEY not in os.environ:
    sys.exit(f"Environment variable: {PKG_MAN_KEY} was not defined")
pkg_man_name = os.environ[PKG_MAN_KEY]
if pkg_man_name not in pkg_mans:
    sys.exit(f"{PKG_MAN_KEY} must be one of {list(pkg_mans.keys())}")
"""

pkg_man_names = ["pacman", "apt"]
installed_pkg_man = None
for pkg_man in pkg_man_names:
    if shutil.which(pkg_man) != None:
        if installed_pkg_man != None:
            raise Exception(
                f"Multiple package managers detected: {pkg_man}, {installed_pkg_man}"
            )
        installed_pkg_man = pkg_man

if installed_pkg_man is None:
    raise Exception(f"Could not find package manager that was {pkg_man_names}")

pkg_man = pkg_mans[installed_pkg_man]


def aptOrPac(apt_name, pac_name):
    if pkg_man == PackageManager.APT:
        return apt_name
    elif pkg_man == PackageManager.PACMAN:
        return pac_name
    raise Exception(f"Unexpected package manager: {pkg_man}")


installer = Installer(pkg_man)
installer.update_pkg_manager()

# git, curl, wget are needed to install packages from source
# The build tools are also (probably) needed
pkgs = ["git", "curl", "wget", aptOrPac("build-essential", "base-devel")]
installer.install_pkgs(pkgs)

# Run nvm installer
nvm_install_script = request.urlopen(
    "https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh"
)
with NamedTemporaryFile(mode="wb") as f:
    f.write(nvm_install_script.read())
    # Ensure output is written
    f.flush()
    run(f"bash {f.name}")

pkgs = [
    "fzf",  # > Ubuntu 19.10
    "ripgrep",  # > Ubuntu 18.10
    "kitty",  # > Ubuntu 19.10
    "bat",  # > Ubuntu 19.10
    "zsh",
    "qbittorrent",
    "npm",
    "redshift",  # TODO: On ubuntu, do we need redshift gtk?
    "feh",
    "compton",
    "yad",
    "xdotool",
    aptOrPac("golang", "go"),
]

if pkg_man == PackageManager.PACMAN:
    # Package manager for installing community packages
    pkgs.append("yay")
    installer.install_pkgs(pkgs)
    pkgs = ["code"]  # Visual Studio Code, open-source version
    yay_pkgs = ["i3-gaps", "google-chrome"]
    installer.install_pkgs(yay_pkgs, False)
elif pkg_man == PackageManager.APT:
    # TODO: Chrome, VsCode
    pass

# TODO: Switch shells to zsh, init zsh, redshift, font(s), udev rule, cp script /usr/local/bin
# fonts = awesome (check if needed), nerd fonts (hack version onyl)
run(f"mkdir {ZSH_DIR}")
clone_zsh_repo("zsh-users/zsh-autosuggestions")
clone_zsh_repo("zsh-users/zsh-syntax-highlighting")
clone_zsh_repo("romkatv/powerlevel10k")
clone_zsh_repo("lukechilds/zsh-nvm")
